// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using onboarding_backend.Database;

#nullable disable

namespace onboarding_backend.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240808042108_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieTags", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("MovieTags");
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PlayUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("Poster")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("movies");
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.MovieSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("StudioId");

                    b.ToTable("movie_schedules");
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<double>("TotalItemPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Snapshots")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SubTotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MovieScheduleId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_items");
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.Studio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeatCapacity")
                        .HasColumnType("int");

                    b.Property<int>("StudioNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("studios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 323, DateTimeKind.Local).AddTicks(1472),
                            SeatCapacity = 10,
                            StudioNumber = 1,
                            UpdatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 323, DateTimeKind.Local).AddTicks(1484)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 323, DateTimeKind.Local).AddTicks(1485),
                            SeatCapacity = 15,
                            StudioNumber = 2,
                            UpdatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 323, DateTimeKind.Local).AddTicks(1486)
                        });
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(64),
                            Name = "Action",
                            UpdatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(73)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(91),
                            Name = "Comedy",
                            UpdatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(92)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(93),
                            Name = "Drama",
                            UpdatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(94)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(96),
                            Name = "Horror",
                            UpdatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(97)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(98),
                            Name = "Romance",
                            UpdatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(99)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(100),
                            Name = "Science Fiction",
                            UpdatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(101)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(102),
                            Name = "Fantasy",
                            UpdatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(103)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(104),
                            Name = "Thriller",
                            UpdatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(105)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(106),
                            Name = "Mystery",
                            UpdatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(107)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(108),
                            Name = "Documentary",
                            UpdatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 477, DateTimeKind.Local).AddTicks(109)
                        });
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = "https://static-00.iconduck.com/assets.00/avatar-default-symbolic-icon-479x512-n8sg74wg.png",
                            CreatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 476, DateTimeKind.Local).AddTicks(9782),
                            Email = "admin@admin.com",
                            IsAdmin = true,
                            Name = "Admin",
                            Password = "$2a$11$DEff0XY20L.vWYpbAEg.H.2SKI985HaoxSmkfB57Ya062Ry.cXksa",
                            UpdatedAt = new DateTime(2024, 8, 8, 11, 21, 8, 476, DateTimeKind.Local).AddTicks(9801)
                        });
                });

            modelBuilder.Entity("MovieTags", b =>
                {
                    b.HasOne("onboarding_backend.Database.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onboarding_backend.Database.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.MovieSchedule", b =>
                {
                    b.HasOne("onboarding_backend.Database.Entities.Movie", "Movie")
                        .WithMany("Schedules")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onboarding_backend.Database.Entities.Studio", "Studio")
                        .WithMany("MovieSchedules")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.Order", b =>
                {
                    b.HasOne("onboarding_backend.Database.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.OrderItem", b =>
                {
                    b.HasOne("onboarding_backend.Database.Entities.MovieSchedule", "MovieSchedule")
                        .WithMany("OrderItems")
                        .HasForeignKey("MovieScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onboarding_backend.Database.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieSchedule");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.Movie", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.MovieSchedule", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.Studio", b =>
                {
                    b.Navigation("MovieSchedules");
                });

            modelBuilder.Entity("onboarding_backend.Database.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
